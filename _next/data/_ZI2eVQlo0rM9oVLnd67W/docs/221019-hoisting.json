{"pageProps":{"markdoc":{"content":{"$$mdtype":"Tag","name":"article","attributes":{},"children":[{"$$mdtype":"Tag","name":"Heading","attributes":{"level":2,"id":"호이스팅-개요"},"children":["호이스팅 개요"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["인터프리터가 변수와 함수의 메모리 공간을 선언 전에 미리 할당하는 것을 말합니다. 다시 말해 **\"변수의 선언과 초기화를 분리한 후, 선언만 코드의 최상단으로 옮기는 것\"**을 가리킵니다. JS Parser 내에서 이뤄지기 때문에 실제 메모리 변화는 없습니다."]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["Javascript는 함수 코드 실행에 앞서 선언에 대한 메모리를 우선 할당할 수 있습니다. 이에 함수 선언을 함수 호출보다 먼저 배치할 수 있습니다."]},{"$$mdtype":"Tag","name":"Fence","attributes":{"data-language":"javascript"},"children":["function hello(name) {\n  console.log('hello' + name);\n};\n\nhello(\"John\");\n\n/*\nhello John\n*/\n"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["위가 함수 선언 후 호출하는 일반적인 코드 작성 순서입니다."]},{"$$mdtype":"Tag","name":"Fence","attributes":{"data-language":"javascript"},"children":["hello(\"John\");\n\nfunction hello(name) {\n  console.log('hello' + name);\n};\n\n/*\nhello John\n*/\n"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["함수 호출이 선언보다 앞서지만 정상적으로 동작합니다."]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":2,"id":"호이스팅-대상"},"children":["호이스팅 대상"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["Javascript는 초기화를 제외한 선언만 호이스팅합니다."]},{"$$mdtype":"Tag","name":"Fence","attributes":{"data-language":"javascript"},"children":["console.log(num); // undefined 출력\n\nvar num; // 선언\nnum = 9; // 초기화\n"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["위 예시와 달리 아래 예시에는 초기화만 있습니다. 따라서 호이스팅이 일어나지 않아 ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["ReferenceError"]},"가 발생합니다."]},{"$$mdtype":"Tag","name":"Fence","attributes":{"data-language":"javascript"},"children":["console.log(num); // ReferenceError\n\nnum = 9; // 초기화\n"]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":2,"id":"함수선언문과-함수표현식"},"children":["함수선언문과 함수표현식"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["함수표현식은 함수선언문과 달리 선언과 호출 순서에 따라 정상적으로 함수가 실행되지 않을 수 있습니다. 이는 함수표현식에서 선언과 할당이 분리되기 때문입니다."]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":3,"id":"정상-출력"},"children":["정상 출력"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["함수표현식 선언이 호출보다 위에 있는 경우"]},{"$$mdtype":"Tag","name":"Fence","attributes":{"data-language":"javascript"},"children":["function outer() { // 함수선언문\n  var inner = function () { // 함수표현식\n    return \"inner value\";\n  }\n  var res = inner(); // 함수 호출\n}\n\n\n/* JS Parser 내부 호이스팅 결과 */\nfunction outer() {\n  var inner; // 함수표현식의 변수값 선언\n  var res; // var 변수값 선언\n\n  inner = function () { // 함수표현식 할당\n    return \"inner value\";\n  }\n  var res = inner(); // 함수 호출\n}\n"]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":3,"id":"오류"},"children":["오류"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["함수표현식 선언이 호출보다 아래에 있는 경우 - TypeError"]},{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":[{"$$mdtype":"Tag","name":"code","attributes":{},"children":["outer()"]},"가 실행될 때 ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["inner"]},"에는 ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["undefined"]},"가 할당됩니다."]}]},{"$$mdtype":"Tag","name":"Fence","attributes":{"data-language":"javascript"},"children":["function outer() { // 함수선언문\n  var res = inner(); // \"undefined\": 선언은 돼 있지만 값이 할당되지 않은 상태\n  var inner = function () { // 함수표현식\n    return \"inner value\";\n  }\n}\n\nouter(); // > TypeError: inner is not a function\n\n\n/* JS Parser 내부 호이스팅 결과 */\nfunction outer() {\n  var inner; // 함수표현식 변수값 선언\n  var res = inner(); // \"undefined\"\n  inner = function () {\n    return \"inner value\";\n  }\n}\n\nouter(); // > TypeError: inner is not a function\n"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["함수표현식 선언이 호출보다 아래 있는 경우"]},{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["inner에 대한 선언이 돼있지 않아 오류가 발생합니다."]}]},{"$$mdtype":"Tag","name":"Fence","attributes":{"data-language":"javascript"},"children":["function outer() { // 함수선언문\n  let res = inner();\n  let inner = function () { // 함수표현식\n    return \"inner value\";\n  }\n}\n\nouter(); // > ReferenceError: inner is not defined\n"]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":2,"id":"과-호이스팅"},"children":[{"$$mdtype":"Tag","name":"code","attributes":{},"children":["let"]},"과 ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["const"]}," 호이스팅"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":[{"$$mdtype":"Tag","name":"code","attributes":{},"children":["let"]},"과 ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["const "]},"로 선언한 변수도 호이스팅 대상입니다. 다만 ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["var"]},"와 달리 ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["undefined "]},"로 초기화하지 않습니다. 따라서 초기화 수행 전에 읽는 코드가 나오면 예외가 발생합니다."]},{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":[{"$$mdtype":"Tag","name":"code","attributes":{},"children":["var"]}," : 호이스팅 시 ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["undefined"]},"로 변수 초기화"]},{"$$mdtype":"Tag","name":"li","attributes":{},"children":[{"$$mdtype":"Tag","name":"code","attributes":{},"children":["let"]},", ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["const"]}," : 호이스팅 시 변수 초기화하지 않음"]}]},{"$$mdtype":"Tag","name":"blockquote","attributes":{},"children":[{"$$mdtype":"Tag","name":"p","attributes":{},"children":[{"$$mdtype":"Tag","name":"code","attributes":{},"children":["let"]},", ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["const"]}," 사용시에도 호이스팅은 일어나지만 메모리 공간만 할당하는 선언만 이뤄집니다. 해당 코드가 실행되기 전까지 초기화 과정이 이뤄지지 않기 때문에 참조 대상이 없는 상태가 돼 reference error가 발생하게 됩니다. 따라서 ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["var"]},"선언문과 함수선언문에서만 실질적인 호이스팅 효과가 나타납니다."]}]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":2,"id":"주의사항"},"children":["주의사항"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["코드 가독성과 유지보수를 위해 호이스팅은 일어나지 않도록 하는게 바람직합니다."]},{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["함수와 변수는 가급적 코드 상단부에 선언하도록 합니다."]},{"$$mdtype":"Tag","name":"li","attributes":{},"children":[{"$$mdtype":"Tag","name":"code","attributes":{},"children":["let"]},"과 ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["const"]},"를 사용하도록 합니다."]}]}]},"frontmatter":{"title":"호이스팅","desc":"변수의 선언과 초기화를 분리한 후, 선언만 코드의 최상단으로 옮기는 것","date":"2022-10-19","tags":"frontend 기술면접"},"file":{"path":"/docs/221019-hoisting.md"}}},"__N_SSG":true}