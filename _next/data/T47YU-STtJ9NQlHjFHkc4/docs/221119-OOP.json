{"pageProps":{"markdoc":{"content":{"$$mdtype":"Tag","name":"article","attributes":{},"children":[{"$$mdtype":"Tag","name":"p","attributes":{},"children":["Object-Oriented Programming"]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":2,"id":"개요"},"children":["개요"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["OOP는 현실세계를 프로그래밍으로 옮겨와 현실세계의 사물들을 객체로 보고, 그 객체로부터 개발하고자 하는 특징과 기능을 뽑아와 프로그래밍하는 기법입니다. OOP로 코드 재사용성과 변형가능성을 높일 수 있습니다."]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":2,"id":"5가지-설계-원칙"},"children":["5가지 설계 원칙"]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":3,"id":"srp---single-responsibility-principle"},"children":["SRP - Single Responsibility Principle"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["단일 책임 원칙"]},{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["class는 단 하나의 목적을 가져야 함"]},{"$$mdtype":"Tag","name":"li","attributes":{},"children":["class 변경 이유는 단 하나의 이유여야 함"]}]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":3,"id":"ocp---open-closed-principle"},"children":["OCP - Open-Closed Principle"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["개발 폐쇄 원칙"]},{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["class는 확장에 열려 있고 변경에는 닫혀 있어야 함"]}]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":3,"id":"lsp---liskov-substitution-principle"},"children":["LSP - Liskov Substitution Principle"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["리스코프 치환 원칙"]},{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["상위 타입의 객체를 하위 타입으로 바꿔도 프로그램은 일관되게 동작해야 함"]}]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":3,"id":"isp---interface-segregation-principle"},"children":["ISP - Interface Segregation Principle"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["인터페이스 분리 원칙"]},{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["client는 이용하지 않는 메소드에 의존하지 않도록 인터페이스를 분리해야 함"]}]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":3,"id":"dip---dependency-inversion-principle"},"children":["DIP - Dependency Inversion Principle"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["의존 역전 법칙"]},{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["client는 추상화(인터페이스)에 의존해야 하며, 구체화(구현된 class)에 의존해선 안됨"]},{"$$mdtype":"Tag","name":"li","attributes":{},"children":["추상화",{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["복잡한 부분 감추고 공통된 주요부분으로 일반화하는 것"]},{"$$mdtype":"Tag","name":"li","attributes":{},"children":["시스템 확장 가능한 구조가 됨"]}]}]}]}]},"frontmatter":{"title":"OOP - 객체 지향 프로그래밍","date":"2022-11-19","desc":"현실세계를 프로그래밍으로 옮겨와 현실세계의 사물들을 객체로 보고, 그 객체로부터 개발하고자 하는 특징과 기능을 뽑아와 프로그래밍하는 기법","tags":"programming"},"file":{"path":"/docs/221119-OOP.md"}}},"__N_SSG":true}