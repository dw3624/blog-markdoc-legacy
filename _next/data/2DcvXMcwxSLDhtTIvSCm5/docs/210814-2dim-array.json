{"pageProps":{"markdoc":{"content":{"$$mdtype":"Tag","name":"article","attributes":{},"children":[{"$$mdtype":"Tag","name":"Heading","attributes":{"level":1,"id":"2차원-배열"},"children":["2차원 배열"]},{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["1차원 List를 묶어놓은 List"]}]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":3,"id":"배열-순회"},"children":["배열 순회"]},{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["n * m 배열의 모든 원소를 빠짐없이 조사하는 방법"]}]},{"$$mdtype":"Tag","name":"Fence","attributes":{"data-language":"python"},"children":["# 행 우선 순회\nfor row in range(len(Array)):\n    for col in range(len(Array[0])):\n        Array[row][col]\n        \n# 열 우선 순회\nfor col in range(len(Array[0])):\n    for row in range(len(Array)):\n        Array[row][col]\n        \n# 지그재그 순회\nfor row in range(len(Array)):\n    for col in range(len(Array[0])):\n        Array[row][col + (m-1 - 2*j) * (i % 2)]\n        \n        \n# 델타 탐색\n## 좌표에서 4방향의 인접 배열 요소를 탐색하는 방법\narr[[0...n-1][0...n-1]]\ndx = [0,0,-1,1]  # 상하좌우\ndy = [-1,1,0,0]  # 상하좌우\n\nfor x in range(len(arr)):\n    for y in range(len(arr[x])):\n        for i in range(4):\n            testX = x + dx[mode]\n            testY = y + dy[mode]\n            test(arr[testX][testY])\n            \n\n# 전치 행렬\n## 대각선 기준으로 항목 교환 (row, col 교환)\narr = [[1,2,3],[4,5,6],[7,8,9]]  # 3*3 행렬\n\nfor row in range(3):\n    for col in range(3):\n        if row < col:\n            arr[row][col], arr[col][row] = arr[col][row], arr[row][col]\n"]}]},"frontmatter":{"title":"2차원 배열","tags":"알고리즘"},"file":{"path":"/docs/210814-2dim-array.md"}}},"__N_SSG":true}