{"pageProps":{"markdoc":{"content":{"$$mdtype":"Tag","name":"article","attributes":{},"children":[{"$$mdtype":"Tag","name":"Heading","attributes":{"level":2,"id":"개요"},"children":["개요"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["Nextjs로 정적 웹사이트 구축 중 게시물 목록 페이지에서 Pagination 이슈에 부딪혔습니다."]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["해당 페이지는 랜더링 시 모든 데이터를 받고 클라이언트에서 나눠 보여주는 식으로 구성했습니다. 따라서 페이지가 달라도 URL이 바뀌지 않아 뒤로가기를 눌렀을때 무조건 1페이지로 넘어갔습니다."]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["뒤로가기를 눌렀을때 원래 보던 페이지로 돌아가는게 자연스럽고 사용자 경험상 적합해 보여 해결방법을 생각해봤습니다."]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":2,"id":"구상"},"children":["구상"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["우선 다음의 두 가지 해결법을 생각해 봤습니다."]},{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":[{"$$mdtype":"Tag","name":"code","attributes":{},"children":["sessionStorage"]},"에 현재 페이지 정보 저장"]},{"$$mdtype":"Tag","name":"li","attributes":{},"children":["recoil 전역변수에 현재 페이지 정보 저장"]}]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":3,"id":"sessionstorage"},"children":["sessionStorage"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["현재 페이지 정보를 ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["sessionStorage"]},"에 저장하는 방식입니다."]},{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["페이지 진입시 ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["sessionStorage"]},"에 저장된 현재 페이지 반환"]},{"$$mdtype":"Tag","name":"li","attributes":{},"children":["없는 경우 1 반환"]},{"$$mdtype":"Tag","name":"li","attributes":{},"children":["다른 페이지 클릭시 ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["sessionStorage"]}," 갱신"]}]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["nextjs는 서버에서 페이지 랜더링 후 client로 보내 화면을 보여줍니다. ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["sessionStorage는"]}," client에 정보를 저장하기 때문에 nextjs에서는 랜더링시 ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["ReferenceError가"]}," 발생합니다. 이를 해결하기 위해선 client에 window가 생성되기까지 기다린 뒤 javascript가 실행되도록 해야 합니다."]},{"$$mdtype":"Tag","name":"Fence","attributes":{"data-language":"javascript"},"children":["const currentPage = typeof window !== \"undefined\"? sessionStorage.getItem(\"currentPage\"): 1;\n"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["다만 위와 같이 구성하면 client에서 window가 생성될 때까지 기다려야 하기 때문에 규모가 커졌을때 성능 이슈가 생기지 않을까란 의문이 들었습니다. 또한 ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["sessionStorage"]},"에 저장된 값과 사전 랜더링 값이 다른 경우 오류가 발생할 수도 있다는 정보가 있었습니다."]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":3,"id":""},"children":[{"$$mdtype":"Tag","name":"a","attributes":{"href":"https://recoiljs.org/docs/recoil-sync/introduction/"},"children":["recoil"]}]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["현재 페이지 정보를 recoil 전역변수에 저장하는 방식입니다."]},{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["페이지 진입시 전역변수에 저장된 현재 페이지 반환"]},{"$$mdtype":"Tag","name":"li","attributes":{},"children":["없는 경우 1 반환"]},{"$$mdtype":"Tag","name":"li","attributes":{},"children":["다른 페이지 클릭시 전역변수 갱신"]}]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["위 방법을 비교해 봤을 때 recoil이 더 적합해 보입니다. 다만 SSR 환경에서는 여러번 atom을 생성해 경고 메시지를 출력한다는 이슈가 있다고 합니다."]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":2,"id":"url-변경토록-하고싶다!"},"children":["url 변경토록 하고싶다!"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["당초엔 recoil을 사용하려고 했습니다. 하지만 좀더 욕심을 내보도록 합니다! 현재 페이지 정보를 ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["dw3624.github.io/docs/?page=3"]}," 형태로 저장토록 하겠습니다."]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["관련 기능은 ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["recoil-sync"]},"와 ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["use-query-params"]},"에서 제공하는 듯 하지만 아직 개발중이거나 next.js와 궁합이 별로 안좋아 보여 ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["jotai"]},"를 사용하기로 했습니다."]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":2,"id":""},"children":[{"$$mdtype":"Tag","name":"a","attributes":{"href":"https://jotai.org/"},"children":["Jotai"]}]},{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["기본적으로 recoil과 비슷한 사용법"]},{"$$mdtype":"Tag","name":"li","attributes":{},"children":["url 변경기능"]}]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":3,"id":"기본사용법"},"children":["기본사용법"]},{"$$mdtype":"Tag","name":"Fence","attributes":{"data-language":"javascript"},"children":["// _app.js\n\nimport { Provider as JotaiProvider } from \"jotai\";\n...\n  <JotaiProvider>\n    <Component {...pageProps} />\n  </JotaiProvider>\n\n"]},{"$$mdtype":"Tag","name":"Fence","attributes":{"data-language":"javascript"},"children":["// state/jotai/example.js\n\nimport { atom } from \"jotai\";\n\nexport const exState = atom(\"default값\");\n"]},{"$$mdtype":"Tag","name":"Fence","attributes":{"data-language":"javascript"},"children":["import { useAtom } from \"jotai\";\nimport { exState } from \"../state/jotai/example\"\n\nexport const Foo = () => {\n  const [example, setExample] = useAtom(exState)\n  ...\n"]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":3,"id":"pagination-적용"},"children":["Pagination 적용"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["다음 예시처럼 코드를 바꾸면 ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["setPage(3)"]}," 등으로 값을 변경하면 ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["dw3624.github.io/docs#page=3"]},"과 같이 URL에 반영됩니다. 좀더 자세한 내용은 ",{"$$mdtype":"Tag","name":"a","attributes":{"href":"https://github.com/dw3624/dw3624.github.io"},"children":["github"]},"에서 확인해주세요."]},{"$$mdtype":"Tag","name":"Fence","attributes":{"data-language":"javascript"},"children":["// state/jotai/currentPage.js\n\nimport { atomWithHash } from \"jotai/utils\";\n\nexport const currentPage = atomWithHash(\"page\", 1);\n"]},{"$$mdtype":"Tag","name":"Fence","attributes":{"data-language":"javascript"},"children":["// pages/docs.js\n\nimport { useAtom } from 'jotai';\nimport { currentPage } from '../state/jotai/currentPage';\n...\nconst Docs = () => {\n  const [page, setPage] = useAtom(currentPage)\n  ...\n  return (\n    <Pagination\n      currentPage={page}\n      setPage={setPage}\n    />\n  )\n}\n"]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":2,"id":"참고"},"children":["참고"]},{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":[{"$$mdtype":"Tag","name":"a","attributes":{"href":"https://qiita.com/ItsukiN32/items/c87b06dcab1b1383300c"},"children":["【Next.js / React】URLのクエリパラメータで状態を指定する 【Recoil / Jotai】"]}]}]}]},"frontmatter":{"title":"URL 쿼리 파라미터 이용해 Pagination 구현하기","date":"2022-10-27","desc":"Next.js와 Jotai 사용해 SSR Pagination 이슈 해결","tags":"react nextjs jotai"},"file":{"path":"/docs/221027-nextjs-jotai.md"}}},"__N_SSG":true}