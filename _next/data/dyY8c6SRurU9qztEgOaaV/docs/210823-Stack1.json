{"pageProps":{"markdoc":{"content":{"$$mdtype":"Tag","name":"article","attributes":{},"children":[{"$$mdtype":"Tag","name":"Heading","attributes":{"level":1,"id":"stack1"},"children":["Stack1"]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":2,"id":"스택"},"children":["스택"]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":3,"id":"특성"},"children":["특성"]},{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":[{"$$mdtype":"Tag","name":"p","attributes":{},"children":["자료를 쌓아 올린 형태의 자료구조"]}]},{"$$mdtype":"Tag","name":"li","attributes":{},"children":[{"$$mdtype":"Tag","name":"p","attributes":{},"children":["저장된 자료는 선형 구조를 가짐 (자료 간 관계가 1대 1의 관계)"]}]},{"$$mdtype":"Tag","name":"li","attributes":{},"children":[{"$$mdtype":"Tag","name":"p","attributes":{},"children":["자료를 스택에 삽입하거나 스택에서 꺼낼 수 있음"]}]},{"$$mdtype":"Tag","name":"li","attributes":{},"children":[{"$$mdtype":"Tag","name":"p","attributes":{},"children":["마지막에 삽입한 자료를 가장 먼저 꺼냄 (후입선출 - Last-In-First-Out)"]}]}]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":3,"id":"자료구조와-연산"},"children":["자료구조와 연산"]},{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["자료구조: 자료를 선형으로 저장할 저장소",{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["top : 마지막 삽입된 원소 위치"]}]}]},{"$$mdtype":"Tag","name":"li","attributes":{},"children":["연산",{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["삽입 (push) : 저장소에 자료를 저장"]},{"$$mdtype":"Tag","name":"li","attributes":{},"children":["삭제 (pop) : 저장소에서 자료를 꺼냄"]},{"$$mdtype":"Tag","name":"li","attributes":{},"children":["isEmpty : 스택의 공백여부 확인"]},{"$$mdtype":"Tag","name":"li","attributes":{},"children":["peek : 스택의 top에 있는 item을 반환"]}]}]}]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":3,"id":"알고리즘"},"children":["알고리즘"]},{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["push"]}]},{"$$mdtype":"Tag","name":"Fence","attributes":{"data-language":"python"},"children":["def push(item):\n    s.append(item)\n"]},{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["pop"]}]},{"$$mdtype":"Tag","name":"Fence","attributes":{"data-language":"python"},"children":["def pop():\n    if len(s) == 0:\n        # underflow\n        return\n    else:\n        return s.pop(-1);   # 마지막 원소 반환\n"]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":3,"id":"고려사항"},"children":["고려사항"]},{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["1차원 배열을 스택으로 사용시, 구현 용이하나, 스택 크기 변경이 어려움"]},{"$$mdtype":"Tag","name":"li","attributes":{},"children":["해결법으로 저장소를 동적으로 할당해 스택 구현하는 방법 있음",{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["구현 복잡하나, 효율적으로 메모리 사용 가능"]}]}]}]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":4,"id":"예시1---괄호검사"},"children":["예시1 - 괄호검사"]},{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["문자열에 있는 괄호 차례로 조사",{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["( : 스택에 삽입"]},{"$$mdtype":"Tag","name":"li","attributes":{},"children":[") : 스택에서 top 괄호 제거 후 오른쪽 괄호와 짝이 맞는지 검사"]}]}]}]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":4,"id":"예시2---function-call"},"children":["예시2 - Function call"]},{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["함수 호출과 복귀에 따른 수행 순서를 관리"]}]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":2,"id":"재귀호출"},"children":["재귀호출"]},{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["자기 자신을 호출, 순환 수행"]}]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":4,"id":"예시---재귀를-이용한-피보나치-수"},"children":["예시 - 재귀를 이용한 피보나치 수"]},{"$$mdtype":"Tag","name":"Fence","attributes":{"data-language":"python"},"children":["def fibo(n):\n    if n < 2:\n        return n\n    else:\n        return fibo(n-1) + fibo(n-2)\n"]},{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["but... 중복 호출 문제 발생!!"]}]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":2,"id":"memoization"},"children":["Memoization"]},{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["컴퓨터 프로그램 실행시, 이전 계산값을 메모리에 저장함으로써, 중복 계산하지 않도록 해, 실행속도를 빠르게 하는 기술"]},{"$$mdtype":"Tag","name":"li","attributes":{},"children":["동적 계획법의 핵심"]}]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":4,"id":"예시---memoization을-이용한-피보나치-수-알고리즘"},"children":["예시 - Memoization을 이용한 피보나치 수 알고리즘"]},{"$$mdtype":"Tag","name":"Fence","attributes":{"data-language":"python"},"children":["# memo를 위한 배열 할당, 모두 0으로 초기화\n# memo[0]을 0으로, memo[1]을 1로 초기화\n\ndef fibo1(n):\n    global memo\n    if n >= 2 and len(memo) <= n:   # n번째 피보나치 수가 memo에 없는 경우\n        memo.append(fibo1(n-1) + fibo1(n-2))   # memo에 해당 피보나치 수 추가\n    return memo[n]\n\nmemo = [0, 1]\n"]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":2,"id":"dp---dynamic-programming"},"children":["DP - Dynamic Programming"]},{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["최적화 문제를 해결하는 알고리즘"]},{"$$mdtype":"Tag","name":"li","attributes":{},"children":["입력 크기가 작은 부분문제를 해결 후, 그 해를 이용해, 보다 큰 크기의 부분문제들을 해결"]}]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":4,"id":"예시---dp-적용한-피보나치-수-알고리즘"},"children":["예시 - DP 적용한 피보나치 수 알고리즘"]},{"$$mdtype":"Tag","name":"Fence","attributes":{"data-language":"python"},"children":["def fibo2(n):\n    f = [0, 1]\n    \n    for i in range(2, n + 1):\n        f.append(f[i-1] + f[i-2])\n        \n     return f[n]\n"]},{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["memoization은 재귀적 구조보다는 반복적 구조로 DP를 구현하는 것이 성능면에서 더 효율적"]},{"$$mdtype":"Tag","name":"li","attributes":{},"children":["재귀적 구조에서는 오버헤드가 발생하기 때문",{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["오버헤드: 어떤 처리를 하기 위해 들어가는 추가적인 처리 시간/메모리",{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["예) A 작업 소요 시간: 10초"]},{"$$mdtype":"Tag","name":"li","attributes":{},"children":["B 작업 추가 후 A 작업 소요시간: 15초"]},{"$$mdtype":"Tag","name":"li","attributes":{},"children":["오버헤드: 5초"]}]}]}]}]}]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":2,"id":"dfs"},"children":["DFS"]},{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["비선형구조인 그래프 구조는 그래프로 표현된 모든 자료를 모두 검색하는 것이 중요"]},{"$$mdtype":"Tag","name":"li","attributes":{},"children":["두 가지 방법",{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["깊이 우선 탐색 - Depth First Search"]},{"$$mdtype":"Tag","name":"li","attributes":{},"children":["너비 우선 탐색 - Breadth First Search"]}]}]},{"$$mdtype":"Tag","name":"li","attributes":{},"children":["시작점으로부터 한방향으로 경로를 탐색하다가 더이상 갈 수 없게 되면, 가장 마지막에 만났던 갈림길로 돌아가 다른 방향으로 탐색, 반복해 모든 정점 방문하는 순회방법"]},{"$$mdtype":"Tag","name":"li","attributes":{},"children":["후입선출 구조 스택 사용"]}]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":3,"id":"알고리즘-과정"},"children":["알고리즘 과정"]},{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["시작 정점 v를 결정, 방문"]},{"$$mdtype":"Tag","name":"li","attributes":{},"children":["정점 v에 인접한 정점 중에서",{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["i) 방문하지 않은 정점 w",{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["정점 v를 스택에 push 후 정점 w 방문"]},{"$$mdtype":"Tag","name":"li","attributes":{},"children":["w를 v로 해 반복"]}]}]},{"$$mdtype":"Tag","name":"li","attributes":{},"children":["ii) 방문하지 않은 정점 없음",{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["스택을 pop해 가장 마지막 정점을 v로"]},{"$$mdtype":"Tag","name":"li","attributes":{},"children":["탐색 방향 변경 후 반복"]}]}]}]}]},{"$$mdtype":"Tag","name":"li","attributes":{},"children":["스택이 공백이 될때까지 위 과정 반복"]}]},{"$$mdtype":"Tag","name":"Fence","attributes":{"data-language":"python"},"children":["visited[], stack[]\nDFS(v)\n\tv 방문;\n    visited[v] <- true;\n    do {\n        if (v의 인접 정점 중 방문 안 한 w 찾기)\n        \tpush(v);\n        while(w) {\n            w 방문;\n            visited[w] <- true;\n            push(w);\n            v <- w;\n            v의 인접 정점 중 방문 안 한 w 찾기\n        }\n        v <- pop(stack);\n    } while(v)\nend DFS()\n"]}]},"frontmatter":{"title":"스택(1/2)","tags":"알고리즘"},"file":{"path":"/docs/210823-Stack1.md"}}},"__N_SSG":true}